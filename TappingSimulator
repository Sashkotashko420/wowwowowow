kVars = {}
kVars.lp = game:GetService('Players').LocalPlayer
kVars.rs = game:GetService('ReplicatedStorage')
kVars.vu = game:GetService('VirtualUser')
kVars.HttpService = game:GetService("HttpService")

local Mercury = loadstring(game:HttpGet("https://raw.githubusercontent.com/deeeity/mercury-lib/master/src.lua"))()


local MainGUI = Mercury:Create{
    Name = "| Oblivion Hub |",
    Theme = Mercury.Themes.Dark,
    Link = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
}

MainGUI:Credit{
	Name = "Bruno",
	Description = "Main Scripter",
	V3rm = "https://v3rmillion.net/member.php?action=profile&uid=2678717",
	Discord = "LxstAppleDev#0715"
}

MainGUI:Credit{
	Name = "Project Oblivion",
	Description = "Official Project Oblivion Discord Server",
	Discord = "discord.com/invite/cKsuBrYBzA"
}

local farmTab = MainGUI:Tab{
	Name = "Farm",
	Icon = "rbxassetid://10088146939"
}

local eggsTab = MainGUI:Tab{
	Name = "Eggs",
	Icon = "rbxassetid://8997385940"
}

local teleportTab = MainGUI:Tab{
	Name = "Teleport",
	Icon = "rbxassetid://6723742952"
}

local playerTab = MainGUI:Tab{
	Name = "Player",
	Icon = "rbxassetid://7992557358"
}

farmTab:Toggle{
	Name = "Auto Tap",
	StartingState = false,
	Description = nil,
	Callback = function(bool)
        kVars.boolTap = bool
        if bool then fTap() end
    end
}

function fTap()
    spawn(function()
        while kVars.boolTap do
            wait()
            game:GetService("ReplicatedStorage").Events.Tap:FireServer()
        end
    end)
end

local rebirthList = {"1","5","10","20","100","500","2000","4500"}
kVars.selectedRebirth = nil

local MyDropdown = farmTab:Dropdown{
	Name = "Rebirth Amount",
	StartingText = "Select...",
	Description = nil,
	Items = {
        rebirthList
	},
	Callback = function(txt)
        kVars.selectedRebirth = txt
    end
}

farmTab:Toggle{
	Name = "Rebirth",
	StartingState = false,
	Description = nil,
	Callback = function(bool)
        kVars.boolRebirth = bool
    if bool then fRebirths() end
    end
}

function fRebirths()
    spawn(function()
        while kVars.boolRebirth do
            wait()
            if kVars.selectedRebirth ~= nil and kVars.selectedRebirth ~= "Rebirth Amount" then
                game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(kVars.selectedRebirth)
            end
        end
    end)
end

farmTab:Toggle{
	Name = "Rebirth Buttons Upgrade",
	StartingState = false,
	Description = nil,
	Callback = function(bool)
        kVars.boolRebirthUpgrades = bool
        if bool then fRebirthUpgrades() end
    end
}

function fRebirthUpgrades()
    spawn(function()
        while kVars.boolRebirthUpgrades do
            wait()
            game:GetService("ReplicatedStorage").Events.Upgrade:FireServer("rebirthUpgrades")
        end
    end)
end

farmTab:Toggle{
	Name = "Jumps Upgrade",
	StartingState = false,
	Description = nil,
	Callback = function(bool)
        kVars.boolJumpsUpgrade = bool
        if bool then fJumpsUpgrade() end
    end
}

function fJumpsUpgrade()
    spawn(function()
        while kVars.boolJumpsUpgrade do
            wait()
            game:GetService("ReplicatedStorage").Events.Upgrade:FireServer("jumpsUpgrade")
        end
    end)
end

farmTab:Toggle{
	Name = "Gems Upgrade",
	StartingState = false,
	Description = nil,
	Callback = function(bool)
        kVars.boolJumpsUpgrade = bool
        if bool then fGemUpgrade() end
    end
}

function fGemUpgrade()
    spawn(function()
        while kVars.boolGemUpgrade do
            wait()
            game:GetService("ReplicatedStorage").Events.Upgrade:FireServer("gemMultiplierUpgrade")
        end
    end)
end

farmTab:Toggle{
	Name = "Storage Upgrade",
	StartingState = false,
	Description = nil,
	Callback = function(bool)
        kVars.boolJumpsUpgrade = bool
        if bool then fStorageUpgrade() end
    end
}

function fStorageUpgrade()
    spawn(function()
        while kVars.boolStorageUpgrade do
            wait()
            game:GetService("ReplicatedStorage").Events.Upgrade:FireServer("storageUpgrade")
        end
    end)
end

kVars.eggsList = {
    [1] = {name = "Starter", price = "200"},
    [2] = {name = "Wood Egg", price = "2500"},
    [3] = {name = "Jungle Egg", price = "150K"},
    [4] = {name = "Forest Egg", price = "1.5M"},
    [5] = {name = "Bee Egg", price = "5M"},
    [6] = {name = "Swamp Egg", price = "80M"},
    [7] = {name = "Snow Egg", price = "800M"},
    [8] = {name = "Desert Egg", price = "300B"},
    [9] = {name = "Death Egg", price = "2T"},
    [10] = {name = "Beach Egg", price = "15T"},
    [11] = {name = "2M Egg", price = "600T"},
    [12] = {name = "Mine Egg", price = "2Qa"},
    [13] = {name = "Cloud Egg", price = "25Qa"},
    [14] = {name = "Dominus Egg", price = "800T"}
}

kVars.eggPriceList = {}
for i,v in ipairs(kVars.eggsList) do
    table.insert(kVars.eggPriceList, v.price)
end

kVars.selectedEgg = "Starter"

local MyDropdown = eggsTab:Dropdown{
	Name = "Select Egg to Open",
	StartingText = "Select...",
	Description = nil,
	Items = {
        kVars.eggPriceList
	},
	Callback = function(Value)
        kVars.selectedEgg = value
    end
}

eggsTab:Toggle{
	Name = "Open 3 eggs",
	StartingState = false,
	Description = nil,
	Callback = function(bool)
        kVars.boolOpen3 = bool
    end
}

eggsTab:Toggle{
	Name = "Open egg",
	StartingState = false,
	Description = nil,
	Callback = function(bool)
        kVars.boolOpenEgg = bool
        if bool then fOpenEgg() end
    end
}

function fOpenEgg()
    spawn(function()
        while kVars.boolOpenEgg do
            wait()
            for i,v in pairs(kVars.eggsList) do
                if v.price == kVars.selectedEgg then
                    if kVars.boolOpen3 then
                        game:GetService("ReplicatedStorage").Events.HatchEgg:FireServer({},v.name,3)
                    else
                        game:GetService("ReplicatedStorage").Events.HatchEgg:FireServer({},v.name,1)
                    end
                end
            end
        end
    end)
end


teleportTab:Button{
    Name = "Spawn",
    Description = nil,
    Callback = function()
        kVars.lp.Character.HumanoidRootPart.CFrame = CFrame.new(-193.519, 63.174, -461.695)
    end
}

teleportTab:Button{
    Name = "Forest Island",
    Description = nil,
    Callback = function()
        kVars.lp.Character.HumanoidRootPart.CFrame = CFrame.new(-165, 979, -440)
    end
}

teleportTab:Button{
    Name = "Flower Island",
    Description = nil,
    Callback = function()
        kVars.lp.Character.HumanoidRootPart.CFrame = CFrame.new(-179, 1517, -647)
    end
}

teleportTab:Button{
    Name = "Swamp Island",
    Description = nil,
    Callback = function()
        kVars.lp.Character.HumanoidRootPart.CFrame = CFrame.new(-263, 2116, -656)
    end
}

teleportTab:Button{
    Name = "Snow Island",
    Description = nil,
    Callback = function()
        kVars.lp.Character.HumanoidRootPart.CFrame = CFrame.new(-241, 2937, -470)
    end
}

teleportTab:Button{
    Name = "Desert Island",
    Description = nil,
    Callback = function()
        kVars.lp.Character.HumanoidRootPart.CFrame = CFrame.new(-203, 4228, -780)
    end
}

teleportTab:Button{
    Name = "Death Island",
    Description = nil,
    Callback = function()
        kVars.lp.Character.HumanoidRootPart.CFrame = CFrame.new(-319, 5418, -480)
    end
}

teleportTab:Button{
    Name = "Beach Island",
    Description = nil,
    Callback = function()
        kVars.lp.Character.HumanoidRootPart.CFrame = CFrame.new(-183, 6875, -495)
    end
}

teleportTab:Button{
    Name = "Mine Island",
    Description = nil,
    Callback = function()
        kVars.lp.Character.HumanoidRootPart.CFrame = CFrame.new(-281, 8368, -484)
    end
}

teleportTab:Button{
    Name = "Cloud Island",
    Description = nil,
    Callback = function()
        kVars.lp.Character.HumanoidRootPart.CFrame = CFrame.new(-335, 11238, -238)
    end
}

teleportTab:Button{
    Name = "Dominus Island",
    Description = nil,
    Callback = function()
        kVars.lp.Character.HumanoidRootPart.CFrame = CFrame.new(699, 125, 2161)
    end
}

playerTab:Slider{
	Name = "Walk Speed",
	Default = 16,
	Min = 0,
	Max = 500,
	Callback = function(value)
        kVars.lp.Character:WaitForChild('Humanoid').WalkSpeed = value
    end
}

playerTab:Slider{
	Name = "Jump Power",
	Default = 50,
	Min = 0,
	Max = 500,
	Callback = function(value)
        kVars.lp.Character:WaitForChild('Humanoid').JumpPower = value
    end
}

playerTab:Toggle{
	Name = "Infinite Jump",
	StartingState = false,
	Description = nil,
	Callback = function(bool)
        kVars.boolInfJump = bool
    end
}

kVars.InfJumpConnect = game:GetService("UserInputService").JumpRequest:connect(function()
    if kVars.boolInfJump and kVars.lp.Character:FindFirstChild("Humanoid") then
            kVars.lp.Character:FindFirstChildOfClass('Humanoid'):ChangeState("Jumping")
    end
end)

playerTab:Textbox{
	Name = "Player Name",
	Callback = function(value)
        kVars.teleportToPlayer = value
        print(value)
    end
}

playerTab:Button{
	Name = "Teleport",
	Description = nil,
	Callback = function()
        if game.Players.LocalPlayer.Character:WaitForChild('HumanoidRootPart') ~= nil then
            for i, v in pairs(game:GetService('Players'):GetChildren()) do
                local hrp = game:GetService('Players').LocalPlayer.Character:WaitForChild('HumanoidRootPart')
                if string.find(string.lower(v.DisplayName), string.lower(kVars.teleportToPlayer)) then
                    hrp.CFrame = v.Character.HumanoidRootPart.CFrame
                elseif string.find(string.lower(v.Name), string.lower(kVars.teleportToPlayer)) then
                    hrp.CFrame = v.Character.HumanoidRootPart.CFrame
                end
            end
        end
    end
}
